/// LINE 1 "../../koka-code/compiler/syntax/koka-eff.x"
import compiler/common/name
import compiler/common/range
import compiler/syntax/lexeme
import std/num/float64
import std/core-extras
import std/core/undiv
import std/data/word-set

effect koka-lex
  fun start-chunked(): ()
  fun end-chunked(): string
  fun add-chunk(s: sslice): ()
  fun get-rawdelim(): int
  fun set-rawdelim(i: int): ()
  fun do-emit(l: lex, start: alex-pos, end: alex-pos): ()

fun emit(l: lex): <alex,koka-lex> ()
  do-emit(l, get-start(), get-end())
val alex_tab_size:int = 8
val alex-base = alex-base_create()
extern alex-base_create(): vector<int>
  c inline "kk_intx_t arr[] =  { 1, 129, 385, 641, 897, 1153, -56, 289, -55, 49, -33, 529, -32, 1060, -31, 593, -30, 772, -29, 1281, -28, 1345, 1407, -27, 1460, -26, 1524, 1588, 862, 1620, -25, 1684, 0, -24, 1748, 1812, -22, 1876, 0, -21, 2034, 164, 0, 0, 0, 2012, 2077, 2141, 2269, 2397, 2653, 0, -19, -1, 52, 53, 54, 55, 2651, 56, 0, 0, 2030, 2784, 2807, 2845, 2868, 2906, 0, 0, 0, 57, 2881, 2945, 58, 3009, 0, 184, 3201, 0, 0, 0, 3314, 3379, 3443, 3571, 3699, 3955, 0, 244, 215, 0, 0, 0, 3940, 4005, 4069, 4197, 4325, 4581, 216, 0, 355, 0, 3197, 3220, 4661, 4684, 4722, 4745, 442, 0, 4769, 443, 0, 449, 4843, 0, 0, 4933, 4968, 5028, 444, 5063, 5098, 446, 0, 5133, 2023, 445, 4779, 5149, 5212, 5277, 710, 916, 5300, 926, 1209, 1219, 2053, 0, 5365, 5449, 5533, 5623, 5658, 447, 0, 5688, 5771, 5855, 5945, 5980, 6015, 450, 457, 2849, 0, 6142, 6143, 6271, 6335, 6400, 6513, 0, 0, 0, 451, 0, 464, 482, 0, 6641, 310, 2073, 466, 6031, 2085, 6705, 312, 6767, 6820, 313, 6884, 314, 315, 6916, 316, 6980, 456, 7012, 560, 562, 7060, 563, 3172, 735, 7124, 736, 0, 0, 7316, 7317, 7445, 7509, 7574, 7687, 0, 0, 0, 7815, 2803, 7877, 790, 7898, 2804, 7962, 2805, 7994, 791, 8042, 2806, 4904, 2808, 8106, 4681, 4682, 0, 976, 0, 8170, 793, 8234, 8298, 794, 8330, 8394, 8426, 828, 8474, 5100, 8538, 829, 8600, 8653, 968, 8717, 969, 991, 8749, 992, 8813, 1059, 8845, 1061, 1062, 8893, 1083, 5684, 1084, 8957, 1085, 0, 0, 9149, 9150, 9278, 9342, 9407, 9520, 0, 0, 0, 2024, 0, 0, 0, 2028, 0, 1878, 9646, 1880, 1881, 1882, 1883, 1894, 9826, 9827, 9955, 10019, 10084, 10197, 0, 0, 0, 2079, 2055, 1897, 10325, 1899, 10373, 1900, 2103, 1920, 1921 };\nkk_vector_from_cintarray(arr, 306, kk_context())"

val alex-table = alex-table_create()
extern alex-table_create(): vector<int>
  c inline "kk_intx_t arr[] =  { 0, 88, 88, 88, 88, 88, 88, 88, 88, 88, 89, 155, 88, 88, 77, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 156, 120, 118, 120, 120, 120, 120, 78, 123, 141, 120, 120, 141, 121, 120, 122, 128, 130, 130, 130, 130, 130, 130, 130, 130, 130, 120, 141, 120, 120, 120, 120, 88, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 141, 120, 141, 120, 142, 88, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 116, 144, 144, 144, 144, 144, 144, 144, 144, 141, 119, 141, 120, 88, 264, 264, 264, 264, 264, 264, 264, 264, 264, 7, 9, 264, 264, 303, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 11, 13, 15, 17, 19, 21, 24, 26, 31, 34, 274, 37, 73, 60, 242, 278, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 241, 155, 87, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 84, 86, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 83, 85, 79, 79, 79, 82, 240, 238, 237, 236, 234, 72, 75, 89, 114, 101, 264, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 265, 22, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 268, 266, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 269, 267, 273, 273, 273, 270, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 201, 201, 201, 201, 201, 201, 201, 201, 201, 103, 228, 201, 201, 229, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 111, 114, 117, 115, 152, 154, 126, 148, 156, 168, 153, 169, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 170, 173, 176, 179, 182, 184, 184, 187, 150, 201, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 202, 244, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 205, 203, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 206, 204, 210, 210, 210, 207, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 158, 158, 158, 158, 158, 158, 158, 158, 158, 189, 169, 158, 158, 171, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 135, 191, 135, 191, 194, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 158, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 159, 181, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 162, 160, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 163, 161, 167, 167, 167, 164, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 60, 51, 51, 41, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 196, 198, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 211, 219, 228, 231, 234, 40, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 238, 233, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 58, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 47, 49, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 46, 48, 42, 42, 42, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 286, 286, 286, 286, 286, 286, 286, 286, 286, 245, 247, 286, 286, 296, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 247, 250, 297, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 139, 252, 139, 254, 254, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 257, 259, 261, 286, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 287, 281, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 290, 288, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 291, 289, 295, 295, 295, 292, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 276, 276, 276, 276, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 16, 305, 23, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 14, 305, 305, 10, 6, 6, 6, 8, 25, 20, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 276, 276, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 276, 276, 276, 276, 276, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 38, 38, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 38, 38, 38, 38, 38, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 36, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 38, 38, 38, 38, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 69, 178, 277, 279, 35, 69, 31, 29, 28, 27, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 157, 32, 297, 27, 138, 299, 301, 63, 63, 63, 63, 63, 63, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 131, 175, 275, 19, 13, 0, 0, 0, 62, 150, 0, 0, 0, 138, 0, 69, 63, 63, 63, 63, 63, 63, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 131, 69, 0, 0, 0, 69, 0, 69, 64, 0, 0, 66, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 57, 55, 39, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 55, 55, 54, 52, 52, 52, 53, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 101, 101, 101, 101, 0, 101, 0, 64, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 0, 0, 0, 0, 0, 0, 0, 65, 65, 65, 65, 65, 65, 0, 0, 0, 64, 64, 64, 64, 64, 64, 0, 0, 0, 0, 0, 0, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 0, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 0, 0, 0, 0, 0, 0, 0, 67, 67, 67, 67, 67, 67, 0, 0, 0, 66, 66, 66, 66, 66, 66, 0, 0, 0, 0, 0, 0, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 0, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 68, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 0, 0, 0, 0, 211, 215, 217, 221, 0, 223, 68, 68, 68, 68, 68, 68, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 76, 76, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 76, 76, 76, 76, 76, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 71, 74, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 76, 76, 76, 76, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, -1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 0, 0, 0, 0, 0, 0, 0, 106, 106, 106, 106, 106, 106, 0, 0, 112, 105, 105, 105, 105, 105, 105, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 0, 106, 106, 106, 106, 106, 106, 0, 0, 0, 0, 0, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 99, 213, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 96, 98, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 95, 97, 91, 91, 91, 94, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 86, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 87, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 95, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 96, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 98, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 99, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 0, 101, 101, 0, 0, 0, 0, 107, 107, 107, 107, 107, 107, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 0, 0, 0, 0, 0, 0, 0, 108, 108, 108, 108, 108, 108, 0, 0, 0, 107, 107, 107, 107, 107, 107, 0, 0, 0, 0, 0, 0, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 0, 108, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 113, 0, 0, 0, 0, 90, 0, 110, 110, 110, 110, 110, 110, 0, 0, 0, 109, 109, 109, 109, 109, 109, 178, 0, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 0, 0, 0, 0, 0, 110, 110, 110, 110, 110, 110, 138, 0, 0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 225, 219, 117, 115, 113, 138, 0, 175, 113, 0, 113, 106, 0, 144, 108, 150, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 0, 0, 0, 0, 0, 0, 0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 0, 0, 0, 0, 144, 0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 120, 0, 120, 120, 120, 120, 0, 0, 0, 120, 120, 0, 120, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 120, 120, 120, 120, 0, 0, 0, 0, 120, 0, 120, 120, 120, 120, 0, 0, 0, 120, 120, 0, 120, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 120, 120, 120, 120, 120, 120, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 120, 120, 120, 120, 120, 120, 120, 120, 0, 0, 0, 120, 120, 0, 120, 120, 0, 128, 130, 130, 130, 130, 130, 130, 130, 130, 130, 120, 0, 120, 120, 120, 120, 120, 0, 120, 0, 124, 0, 124, 124, 124, 124, 0, 0, 0, 124, 124, 0, 124, 124, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 124, 120, 124, 124, 124, 124, 0, 0, 0, 0, 124, 0, 124, 124, 124, 124, 0, 0, 126, 124, 124, 0, 124, 124, 0, 0, 0, 0, 0, 0, 0, 120, 0, 120, 124, 124, 124, 124, 124, 124, 124, 0, 0, 0, 0, 120, 0, 120, 120, 120, 120, 0, 0, 0, 120, 120, 0, 120, 120, 0, 0, 0, 0, 0, 0, 0, 124, 0, 124, 124, 120, 124, 120, 120, 120, 120, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 0, 0, 0, 0, 0, 0, 0, 132, 132, 132, 132, 132, 132, 0, 0, 124, 0, 124, 120, 0, 120, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 0, 0, 132, 132, 132, 132, 132, 132, 0, 0, 0, 0, 0, 120, 133, 120, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 0, 0, 0, 0, 0, 0, 0, 132, 132, 132, 132, 132, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 0, 132, 132, 132, 132, 132, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 0, 0, 0, 0, 0, 0, 0, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 0, 0, 0, 0, 0, 0, 0, 136, 136, 136, 136, 136, 136, 0, 0, 0, 136, 136, 136, 136, 136, 136, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 136, 136, 136, 136, 136, 136, 0, 0, 0, 0, 0, 0, 0, 142, 0, 134, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 0, 0, 0, 0, 0, 0, 0, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 0, 0, 0, 0, 142, 0, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 176, 0, 0, 0, 0, 0, 143, 0, 0, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 0, 0, 0, 0, 0, 0, 0, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 0, 0, 0, 0, 143, 0, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 175, 0, 0, 0, 0, 0, 144, 0, 150, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 0, 0, 0, 0, 0, 0, 0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 0, 0, 0, 0, 144, 0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 146, 0, 146, 146, 146, 146, 0, 0, 0, 146, 146, 0, 146, 146, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 0, 146, 146, 146, 146, 0, 0, 0, 0, 146, 0, 146, 146, 146, 146, 0, 0, 148, 146, 146, 0, 146, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 146, 146, 146, 146, 146, 146, 0, 0, 0, 0, 0, 170, 0, 0, 0, 0, 0, 149, 0, 150, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 0, 146, 0, 146, 146, 0, 146, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 0, 0, 0, 146, 149, 146, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 145, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 0, 0, 0, 0, 0, 0, 0, 0, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 0, 0, 0, 0, 0, 0, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 168, 0, 0, 0, 0, 0, 151, 0, 0, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 0, 0, 0, 0, 0, 0, 0, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 0, 0, 0, 0, 151, 0, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 152, 0, 152, 152, 152, 152, 0, 0, 0, 152, 152, 0, 152, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 0, 152, 152, 152, 152, 0, 0, 0, 0, 153, 0, 153, 153, 153, 153, 0, 0, 0, 153, 153, 0, 153, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 153, 152, 153, 153, 153, 153, 0, 0, 0, 0, 154, 0, 154, 154, 154, 154, 0, 0, 0, 154, 154, 0, 154, 154, 0, 0, 0, 0, 0, 0, 0, 152, 0, 152, 153, 154, 153, 154, 154, 154, 154, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 153, 0, 153, 154, 0, 154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 154, 0, 154, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 159, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 160, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 163, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 200, 200, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 200, 200, 200, 200, 200, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 174, 183, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 188, 192, 180, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 190, 192, 192, 195, 199, 199, 199, 197, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 200, 200, 200, 200, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 202, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 203, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 205, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 206, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 216, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 218, 227, 227, 222, 226, 226, 226, 224, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 263, 263, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 263, 263, 263, 263, 263, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 232, 246, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 251, 255, 243, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 253, 255, 255, 258, 262, 262, 262, 260, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 263, 263, 263, 263, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 265, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 266, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 268, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 269, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 283, 285, 280, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 284, 285, 285, 302, 300, 300, 300, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 287, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 288, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 290, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 291, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nkk_vector_from_cintarray(arr, 10629, kk_context())"

val alex-check = alex-check_create()
extern alex-check_create(): vector<int>
  c inline "kk_intx_t arr[] =  {};\nkk_vector_from_cintarray(arr, 10629, kk_context())"

val alex-deflt = alex-deflt_create()
extern alex-deflt_create(): vector<int>
  c inline "kk_intx_t arr[] =  { -1, 275, 230, 172, 70, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 264, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, 44, 51, 43, 44, 51, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 102, 80, 81, 88, 80, 81, 88, -1, -1, 88, -1, -1, -1, 92, 93, 100, 92, 93, 100, -1, -1, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 158, -1, -1, 158, 165, 166, 158, 165, 166, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 158, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 201, -1, -1, 201, 208, 209, 201, 208, 209, -1, -1, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 201, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 264, -1, -1, 264, 271, 272, 264, 271, 272, -1, -1, -1, -1, -1, -1, -1, 286, -1, -1, -1, -1, -1, 286, -1, -1, 286, 293, 294, 286, 293, 294, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };\nkk_vector_from_cintarray(arr, 306, kk_context())"

val alex-accept : vector<alexAcc> = ( [ AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(112), AlexAccNone, AlexAcc(111), AlexAccNone, AlexAcc(110), AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(109), AlexAccNone, AlexAcc(108), AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(107), AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(106), AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(105), AlexAcc(104), AlexAcc(103), AlexAcc(102), AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(101), AlexAcc(100), AlexAcc(99), AlexAcc(98), AlexAcc(97), AlexAcc(96), AlexAcc(95), AlexAccNone, AlexAcc(94), AlexAcc(93), AlexAcc(92), AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(91), AlexAcc(90), AlexAcc(89), AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(88), AlexAcc(87), AlexAcc(86), AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(85), AlexAcc(84), AlexAcc(83), AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(82), AlexAccNone, AlexAcc(81), AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(80), AlexAccNone, AlexAccNone, AlexAcc(79), AlexAccNone, AlexAcc(78), AlexAcc(77), AlexAcc(76), AlexAcc(75), AlexAcc(74), AlexAcc(73), AlexAcc(72), AlexAcc(71), AlexAccNone, AlexAccNone, AlexAcc(70), AlexAcc(69), AlexAcc(68), AlexAccNone, AlexAcc(67), AlexAccNone, AlexAcc(66), AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(65), AlexAcc(64), AlexAccNone, AlexAccNone, AlexAcc(63), AlexAcc(62), AlexAcc(61), AlexAcc(60), AlexAcc(59), AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(58), AlexAcc(57), AlexAccNone, AlexAcc(56), AlexAcc(55), AlexAcc(54), AlexAcc(53), AlexAcc(52), AlexAcc(51), AlexAccNone, AlexAcc(50), AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(49), AlexAcc(48), AlexAcc(47), AlexAcc(46), AlexAcc(45), AlexAccNone, AlexAccNone, AlexAcc(44), AlexAcc(43), AlexAcc(42), AlexAccNone, AlexAccNone, AlexAcc(41), AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(40), AlexAccNone, AlexAccNone, AlexAcc(39), AlexAccNone, AlexAcc(38), AlexAccNone, AlexAcc(37), AlexAccNone, AlexAccNone, AlexAcc(36), AlexAccNone, AlexAcc(35), AlexAccNone, AlexAcc(34), AlexAcc(33), AlexAcc(32), AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(31), AlexAcc(30), AlexAcc(29), AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(28), AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(27), AlexAccNone, AlexAccNone, AlexAcc(26), AlexAccNone, AlexAcc(25), AlexAccNone, AlexAcc(24), AlexAccNone, AlexAccNone, AlexAcc(23), AlexAccNone, AlexAcc(22), AlexAccNone, AlexAcc(21), AlexAcc(20), AlexAcc(19), AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(18), AlexAcc(17), AlexAcc(16), AlexAcc(15), AlexAcc(14), AlexAcc(13), AlexAcc(12), AlexAccNone, AlexAcc(11), AlexAcc(10), AlexAcc(9), AlexAcc(8), AlexAcc(7), AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAccNone, AlexAcc(6), AlexAcc(5), AlexAccNone, AlexAccNone, AlexAcc(4), AlexAccNone, AlexAcc(3), AlexAcc(2), AlexAcc(1), AlexAcc(0) ]: list<alexAcc>).vector;

val alex-actions : vector<action> = vector-init-list(113, [ (112,alex_action_42), (111,alex_action_42), (110,alex_action_42), (109,alex_action_42), (108,alex_action_42), (107,alex_action_42), (106,alex_action_34), (105,alex_action_33), (104,alex_action_32), (103,alex_action_32), (102,alex_action_32), (101,alex_action_32), (100,alex_action_32), (99,alex_action_32), (98,alex_action_32), (97,alex_action_32), (96,alex_action_32), (95,alex_action_32), (94,alex_action_32), (93,alex_action_31), (92,alex_action_30), (91,alex_action_29), (90,alex_action_28), (89,alex_action_27), (88,alex_action_26), (87,alex_action_25), (86,alex_action_25), (85,alex_action_25), (84,alex_action_24), (83,alex_action_23), (82,alex_action_23), (81,alex_action_22), (80,alex_action_21), (79,alex_action_20), (78,alex_action_8), (77,alex_action_19), (76,alex_action_18), (75,alex_action_17), (74,alex_action_17), (73,alex_action_17), (72,alex_action_17), (71,alex_action_11), (70,alex_action_16), (69,alex_action_15), (68,alex_action_14), (67,alex_action_14), (66,alex_action_14), (65,alex_action_13), (64,alex_action_13), (63,alex_action_12), (62,alex_action_11), (61,alex_action_10), (60,alex_action_9), (59,alex_action_8), (58,alex_action_7), (57,alex_action_6), (56,alex_action_5), (55,alex_action_4), (54,alex_action_3), (53,alex_action_2), (52,alex_action_1), (51,alex_action_0), (50,alex_action_50), (49,alex_action_5), (48,alex_action_49), (47,alex_action_6), (46,alex_action_50), (45,alex_action_48), (44,alex_action_8), (43,alex_action_9), (42,alex_action_12), (41,alex_action_50), (40,alex_action_50), (39,alex_action_50), (38,alex_action_50), (37,alex_action_50), (36,alex_action_50), (35,alex_action_50), (34,alex_action_50), (33,alex_action_47), (32,alex_action_46), (31,alex_action_45), (30,alex_action_46), (29,alex_action_44), (28,alex_action_46), (27,alex_action_46), (26,alex_action_46), (25,alex_action_46), (24,alex_action_46), (23,alex_action_46), (22,alex_action_46), (21,alex_action_46), (20,alex_action_43), (19,alex_action_42), (18,alex_action_41), (17,alex_action_40), (16,alex_action_39), (15,alex_action_38), (14,alex_action_41), (13,alex_action_37), (12,alex_action_36), (11,alex_action_36), (10,alex_action_36), (9,alex_action_36), (8,alex_action_36), (7,alex_action_36), (6,alex_action_36), (5,alex_action_35), (4,alex_action_36), (3,alex_action_36), (2,alex_action_42), (1,alex_action_42), (0,alex_action_42) ] : list<(int,action)>);

val comment = 1
val linecom = 2
val linedir = 3
val stringlit = 4
val stringraw = 5
val alex_action_0: action = fn() { emit(LexWhite(get-string()))}
val alex_action_1: action = fn() { emit(LexWhite("\n")) }
val alex_action_2: action = fn() { push-state(comment); start-chunked(); }
val alex_action_3: action = fn() { push-state(linecom); start-chunked(); }
val alex_action_4: action = fn() { push-state(linedir); start-chunked(); }
val alex_action_5: action = fn() { emit(LexCons(get-qname())) }
val alex_action_6: action = fn() { emit(LexId(get-qname())) }
val alex_action_7: action = fn() { emit(LexIdOp(get-slice().strip-parens.newQName)) }
val alex_action_8: action = fn() {
    val s = get-string();
    if s.is-reserved then emit(LexKeyword(s, ""))
    elif s.is-malformed then emit(LexError(message-malformed))
    else emit(LexId(s.new-name))
  }
val alex_action_9: action = fn() { emit(LexCons(get-name())) }
val alex_action_10: action = fn() { emit(LexWildCard(get-name())) }
val alex_action_11: action = fn() { emit(LexSpecial(get-string())) }
val alex_action_12: action = fn() { val s = get-string(); emit(LexFloat(s.parse-float64.expect(msg="when parsing " ++ s), s)) }
val alex_action_13: action = fn() { val s = get-string(); emit(LexFloat(s.parse-float64.expect(msg="when parsing " ++ s), s)) }
val alex_action_14: action = fn() { val s = get-string(); emit(LexInt(s.parse-int.expect(msg="when parsing " ++ s), s)) }
val alex_action_15: action = fn() { emit(LexOp(get-name())) }
val alex_action_16: action = fn() { emit(LexIdOp(get-slice().strip-parens.new-name)) }
val alex_action_17: action = fn() {
    val s = get-string();  
    if s.is-reserved then emit(LexKeyword(s,""))
    elif s.is-prefix-op then emit(LexPrefix(s.new-name))
    else emit(LexOp(s.new-name))
   }
val alex_action_18: action = fn() { push-state(stringlit); start-chunked(); }
val alex_action_19: action = fn() { push-state(stringraw); start-chunked(); push-rawdelim(); }
val alex_action_20: action = fn() { emit(LexChar(get-slice().sslice/drop(2).next.expect.tuple2/fst.char/from-char-esc)) }
val alex_action_21: action = fn() { emit(LexChar(get-slice().sslice/drop(3).extend(-1).char/from-hex-esc)) }
val alex_action_22: action = fn() { emit(LexChar(get-slice().sslice/drop(1).next.expect.tuple2/fst)) }
val alex_action_23: action = fn() { emit(LexError("illegal character literal: " ++ get-slice().sslice/drop(1).next.map(tuple2/fst).default(' ').show)) }
val alex_action_24: action = fn() { emit(LexError("tab characters: configure your editor to use spaces instead (soft tab)")) }
val alex_action_25: action = fn() { emit(LexError("illegal character: " ++ get-slice().show ++ (if (get-string() =="\t") then " (replace tabs with spaces)" else ""))) }
val alex_action_26: action = fn() { unsafe-char("string") }
val alex_action_27: action = fn() { extend-slice(id) }
val alex_action_28: action = fn() { extend-slice(sslice/from-char-esc) }
val alex_action_29: action = fn() { extend-slice(sslice/from-hex-esc) }
val alex_action_30: action = fn() { pop-state(); val s = end-chunked(); emit(LexString(s)) }
val alex_action_31: action = fn() { pop-state(); end-chunked(); emit(LexError("string literal ended by a new line")) }
val alex_action_32: action = fn() { pop-state(); val s = end-chunked(); emit(LexError("illegal character in string: " ++ s.show)) }
val alex_action_33: action = fn() { unsafe-char("raw string") }
val alex_action_34: action = fn() { extend-slice(id) }
val alex_action_35: action = fn() {
                            val delim = get-slice().count
                            val curdelim = get-rawdelim()
                            if delim == curdelim then
                              emit(LexString(end-chunked()))
                              pop-state()
                              pop-rawdelim()
                            elif delim > curdelim then // too many terminating hashes
                              emit(LexError("raw string: too many '#' terminators in raw string (expecting " ++ show(delim - 1) ++ ")"))
                              end-chunked()
                              pop-state()
                              pop-rawdelim()
                            else // continue
                              extend-slice(id)
                          }
val alex_action_36: action = fn() {
  emit(LexError("illegal character in raw string: " ++ end-chunked().show))
  pop-state()
  pop-rawdelim()
 }
val alex_action_37: action = fn() {
  val st = pop-state()
  // TODO? end-chunked()
  if st == comment then extend-slice(id)
  else 
    emit(LexComment(end-chunked().list.filter(fn(c) c != '\r').string))
    pop-state()
    ()
}
val alex_action_38: action = fn() { push-state(comment); start-chunked(); }
val alex_action_39: action = fn() { unsafe-char("comment") }
val alex_action_40: action = fn() { extend-slice(id) }
val alex_action_41: action = fn() { extend-slice(id) }
val alex_action_42: action = fn() { pop-state(); emit(LexError("illegal character in comment: " ++ end-chunked().show)) }
val alex_action_43: action = fn() { unsafe-char("line comment") }
val alex_action_44: action = fn() { extend-slice(id) }
val alex_action_45: action = fn() { pop-state(); emit(LexComment(end-chunked().list.filter(fn(c) c !='\r').string)) }
val alex_action_46: action = fn() { pop-state(); emit(LexError("illegal character in line comment: " ++ end-chunked().show)) }
val alex_action_47: action = fn() { unsafe-char("line directive") }
val alex_action_48: action = fn() { extend-slice(id) }
val alex_action_49: action = fn() { pop-state(); emit(LexComment(end-chunked().list.filter(fn(c) c !='\r').string)) }
val alex_action_50: action = fn() { pop-state(); emit(LexError("illegal character in line directive: " ++ end-chunked().show)) }

// -----------------------------------------------------------------------------
// ALEX TEMPLATE
// -----------------------------------------------------------------------------
// This code is in the PUBLIC DOMAIN; you may copy it freely and use
// it for any purpose whatsoever.

// -----------------------------------------------------------------------------
// Main lexing routines

// import std/core-extras
// import std/core/undiv

effect alex
  // Lexer state
  fun push-state(i: int): () // Push a new state onto the stack
  fun pop-state(): int // Pop the current state off the stack
  fun get-state(): int // Gets the current state of the stack
  // Lexer input movement
  fun next-char(): maybe<char> // Gets the next character in the input
  fun prev-char(): char // Gets the previous character in the input
  fun consume-char(): () // Consumes the current character, adding it to the accepted input
  // Lexer accepting finished tokens and info
  fun set-accept(s: int): () // Sets the latest potential accepting state, while still seeking for states that accept more input
  fun recognize-token(): alexAccRes // Recognizes that the last accepting state is the longest accepting token, and prepares to start the next token
  fun action-info(): action-info // Get the info about the last token recognized (start, end, and slice) for the action

pub value struct alex-pos
  offset: int
  column: int
  line: int

// alias alex-eff = <pure, alex>
// alias handled-alex-eff = <pure>
// val alex-actions: vector<action> = [].vector
// val alex-accept: vector<alexAcc> = [].vector
// val alex-base : vector<int> = [].vector
// val alex-check : vector<int> = [].vector
// val alex-table : vector<int> = [].vector
// val alex-deflt : vector<int> = [].vector

alias alex-eff = <pure,alex,koka-lex>
alias handled-alex-eff = <pure,koka-lex>

fun pos-move(Alex-pos(o, l, c): alex-pos, char: char): alex-pos
  val o1 = if o < 0 then o else o+1
  match char
    '\n' -> Alex-pos(o1, l + 1, 1)
    _    -> Alex-pos(o1, l, c + 1)

alias action = () -> alex-eff ();

struct action-info
  token: sslice
  start: alex-pos
  end: alex-pos

fun get-slice()
  action-info().token

fun get-string()
  get-slice().string

fun get-start()
  action-info().start

fun get-end()
  action-info().end

value type alexAcc
  AlexAccNone
  AlexAcc(a: int)
  AlexAccSkip

ref type alexAccRes
  AlexAccResNone
  AlexAccRes(action: int, input: sslice, acc: sslice, end: alex-pos)
  AlexAccResSkip(input: sslice, acc: sslice)

ref struct alexScanState
  states: list<int> 
  seek: sslice // The seeked position in the input
  // on an error, we want to keep the input *before* the
  // character that failed, not after.
  current: sslice // Trails the seeked position by one
  acc: sslice // The slice representing the current 'accepted' portion of the input
  prev: char // Previous character
  curr: char // Current character
  start: alex-pos // File position of the start of the current token
  end: alex-pos // File position of the end of the current token
  last-accept: alexAccRes // The last accepting state encountered
  action-info: action-info // The action info

// Consumes the current character, adding it to the accepted input for this token
fun alex-consume-char(a: alexScanState)
  match a
    AlexScanState(states, seek, current, acc, prev, curr, start, end, last-accept, action-info) ->
      AlexScanState(states, seek, current, acc.extend(1), prev, curr, start, end.pos-move(curr), last-accept, action-info)
      
// Moves the current to the seeked position, and moves the seeked position to the next character
fun alex-next(a: alexScanState): (maybe<(alexScanState,char)>)
  match a
    AlexScanState(states, seek, _, acc, _, curr, start, end, last-accept, action-info) ->
      match seek.next()
        Just((c, slice')) ->
          Just((AlexScanState(states, slice', seek, acc, curr, c, start, end, last-accept, action-info), c))
        Nothing ->  Nothing

fun do-alex-accept(a: alexScanState, s: int) // Sets the accepting state
  match a
    AlexScanState(states, seek, current, acc, prev, curr, start, end, last-accept, action-info) ->
      match alex-accept.unsafe-idx(s.ssize_t)
        AlexAccNone -> 
          AlexScanState(states, seek, current, acc, prev, curr, start, end, last-accept, action-info) // Just use the previous accepting state
        AlexAcc(act) -> 
          // New accepting state with this accumlated input and end, and the action associated with it
          AlexScanState(states, seek, current, acc, prev, curr, start, end, AlexAccRes(act, seek, acc, end), action-info)
        AlexAccSkip -> 
          // An accepting state that skips over this input
          AlexScanState(states, seek, current, acc, prev, curr, start, end, AlexAccResSkip(seek, acc), action-info)

// Recognizes the last accepting state as the longest accepting token
fun recognize(a: alexScanState, restart: bool)
  match a
    AlexScanState(states, seek, current, acc, prev, curr, start, end, last-accept, action-info) ->
      match last-accept
        AlexAccResNone ->  
          match seek.next() // Check if we are at the end of the input
            Nothing -> 
              // EOF
              AlexScanState(states, seek, current, acc, prev, curr, start, end, last-accept, action-info)
            Just ->
              if restart then // Try skipping the first character, and start again
                AlexScanState(states, seek, seek, seek.truncate(), ' ', ' ', end, end, AlexAccResNone, action-info)
              else
                throw("Alex Error at: " ++ seek.subslice(0, 50).string.show)
        AlexAccRes(_, resnext, resacc, resend) ->
          // trace("Recognized " ++ resacc.show)
          AlexScanState(states, resnext, resnext, resnext.truncate(), ' ', ' ', end, end, AlexAccResNone, Action-info(resacc, start, resend))
        AlexAccResSkip(resnext) ->
          AlexScanState(states, resnext, resnext, resnext.truncate(), ' ', ' ', end, end, AlexAccResNone, action-info)

fun alex-scan(input: sslice, sc: int, restart:bool=False): handled-alex-eff ()
  var state := AlexScanState([sc], input, input, input.truncate, ' ', ' ' , Alex-pos(0,1,1), Alex-pos(0,1,1), AlexAccResNone, Action-info(input.truncate, Alex-pos(0,1,1), Alex-pos(0,1,1)))
  with handler
    fun get-state()
      match state.states // Get the current lexer state (i.e. the state to start the next token in)
        Cons(s) -> s
    fun push-state(i)
      state := state(states=Cons(i, state.states)) // Push a new state onto the stack
    fun pop-state() // Pop the current state off the stack
      match state.states
        Cons(s, ss) -> 
          state := state(states=ss)
          s
        _ -> throw("No states to pop.")
    fun next-char() 
      val mc = state.alex-next()
      match mc
        Nothing -> Nothing
        Just((s, c)) -> 
          state := s
          Just(c)
    fun consume-char() 
      state := state.alex-consume-char()
    fun prev-char() // Gets the previous character
      state.prev
    fun action-info() // Gets the info for the action
      state.action-info
    fun set-accept(s) // Sets the accepting state
      state := state.do-alex-accept(s)
    fun recognize-token() 
      val la = state.last-accept
      state := state.recognize(restart) 
      la
  alex-scan-tokens(sc)

inline fun do-recognize-token(): alex-eff ()
  val la = recognize-token() // Changes last accept, so we get it prior
  match la
    AlexAccRes(a) ->
      alex-actions.unsafe-idx(a.ssize_t)()
    _ -> ()

// Push the input through the DFA, remembering the most recent accepting
// state it encountered.
fun alex-scan-tokens(s: int): alex-eff ()
  set-accept(s)
  val mc = next-char()
  match mc
    Nothing -> 
      do-recognize-token()
    Just(c) ->
      match c.int
        ord_c ->
          val base = alex-base.unsafe-idx(s.ssize_t)
          val offset = base + ord_c
          val check  = alex-check.unsafe-idx(offset.ssize_t)
          val new_s = if offset >= 0 && check == ord_c
                          then alex-table.unsafe-idx(offset.ssize_t)
                          else alex-deflt.unsafe-idx(s.ssize_t)
          match new_s
              -1 -> 
                do-recognize-token()
                alex-scan-tokens(get-state())
              _ ->
                consume-char()
                alex-scan-tokens(new_s)
/// LINE 238 "../../koka-code/compiler/syntax/koka-eff.x"
fun extend-slice(f: sslice -> sslice)
  add-chunk(f(get-slice()))

fun pop-rawdelim()
  set-rawdelim(0)

fun push-rawdelim()
  set-rawdelim(get-slice().count)

fun get-name()
  get-string().new-name

fun get-qname()
  get-string().newQName

fun unsafe-char(kind: string)
  LexError("unsafe character in " ++ kind ++ ": " ++ get-string())
  end-chunked()
  pop-state()
  ()

fun newQName(s': string)
  val s = s'.list 
  val (rname, rsmod) = s.reverse.span(fn(c) { c != '/' })
  match rsmod // TODO: First case needs condition on rname == Nil
    Cons('/', Cons('/', rmod)) -> new-qualified(rmod.reverse.string, "/")
    Cons('/', rmod) -> new-qualified(rmod.reverse.string, rname.reverse.string)
    _ -> s.string.new-name

fun strip-parens(s: sslice)
  match s.string.list.reverse
    Cons(')', cs) -> 
      match cs.span(fn(c) { c != '(' })
        (op, Cons('(', qual)) -> (op ++ qual).reverse.string
        _ -> s.string
    _ -> s.string


// Reserved
val special-names = [ "{", "}"
    , "(", ")"
    , "<", ">"
    , "[", "]"
    , ";", ","
]

val reserved-names = ["infix", "infixr", "infixl", "prefix", "postfix"
              , "type", "alias"
              , "struct", "enum", "con"
              , "val", "fun", "fn", "extern", "var"
              , "ctl", "final", "raw"
              , "if", "then", "else", "elif"
              , "return", "match", "with", "in"
              , "forall", "exists", "some"
              , "pub", "abstract"
              , "module", "import", "as"

              // effect handlers
              , "handler", "handle"
              , "effect", "receffect"
              , "named"
              , "mask"
              , "override"   

              // deprecated
              , "private", "public"  // use pub
              , "rawctl", "brk"      // use raw ctl, and final ctl

              // alternative names for backwards paper compatability
              , "control", "rcontrol", "except"
              , "ambient", "context" // use effcet
              , "inject"       // use mask
              , "use", "using" // use with instead
              , "function"     // use fun
              , "instance"     // use named

              // future reserved
              , "interface"
              , "unsafe"

              // operators
              , "="
              , "."
              , ":"
              , "->"
              , "<-"
              , ":="
              , "|"]

fun is-reserved(name: string)
  reserved-names.any(fn(n) n == name)

// val reserved-names = 
//       delay({
//         string-pool().add-all(
//         ["infix", "infixr", "infixl", "prefix", "postfix"
//               , "type", "alias"
//               , "struct", "enum", "con"
//               , "val", "fun", "fn", "extern", "var"
//               , "ctl", "final", "raw"
//               , "if", "then", "else", "elif"
//               , "return", "match", "with", "in"
//               , "forall", "exists", "some"
//               , "pub", "abstract"
//               , "module", "import", "as"

//               // effect handlers
//               , "handler", "handle"
//               , "effect", "receffect"
//               , "named"
//               , "mask"
//               , "override"   

//               // deprecated
//               , "private", "public"  // use pub
//               , "rawctl", "brk"      // use raw ctl, and final ctl

//               // alternative names for backwards paper compatability
//               , "control", "rcontrol", "except"
//               , "ambient", "context" // use effcet
//               , "inject"       // use mask
//               , "use", "using" // use with instead
//               , "function"     // use fun
//               , "instance"     // use named

//               // future reserved
//               , "interface"
//               , "unsafe"

//               // operators
//               , "="
//               , "."
//               , ":"
//               , "->"
//               , "<-"
//               , ":="
//               , "|"])
//     })

// fun is-reserved(name: string)
//   reserved-names.force.is-interned(name)

fun is-prefix-op(name: string)
  name == "!" || name == "~"

fun string/is-malformed(name: string)
  name.list.charlist/is-malformed

fun charlist/is-malformed(name: list<char>)
  match name
    Cons('-', Cons(c, cs)) -> !c.is-alpha || cs.is-malformed
    Cons(c, Cons('-', cs)) -> !c.is-alpha || c.is-digit || cs.is-malformed
    Cons(_, cs) -> cs.is-malformed
    Nil -> False

val message-malformed
  = "malformed identifier: a dash must be preceded by a letter or digit, and followed by a letter"

fun char/from-char-esc(c)
  match c
    'n' -> '\n'
    'r' -> '\r'
    't' -> '\t'
    _ -> c

fun sslice/from-char-esc(s: sslice)
  s.drop(2).truncate().extend(1)

fun char/from-hex-esc(s: sslice)
  '\n' // TODO: Implement from-hex-esc

fun sslice/from-hex-esc(s: sslice)
  s.drop(3).extend(-1)
